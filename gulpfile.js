import gulp from "gulp"
import dartSass from 'sass';
import gulpSass from 'gulp-sass';
import del from "del";
import cleanCss from "gulp-clean-css"
import rename from "gulp-rename";
import babel from "gulp-babel";
import uglify from "gulp-uglify";
import sourcemaps from "gulp-sourcemaps";
import autoPrefixer from "gulp-autoprefixer";
import imagein from "gulp-imagemin";
import htmlmin from 'gulp-htmlmin';
import gulpSize  from "gulp-size";
import  newer from "gulp-newer";
import name from "browser-sync";
import webpack from "webpack-stream";
import rigger from "gulp-rigger";
const browserSync = name.create()
const sass = gulpSass(dartSass);

const paths = {
	indexHtml : {
		src : "src/index.html",
		dest : "docs/src"
	},
	html : {
		src : "src/html/**/*",
		allSrc : "src/html/**/*",
		dest : "docs/src/html"
	},
	styles : {
		src : `src/styles/**/*`,
		dest : "docs/src/styles/"
	},
	scripts : {
		src : `src/scripts/**/*.js`,
		dest : "docs/src/scripts/"
	},
	images : {
		src : "src/img/**/*",
		dest: "docs/src/img/"
	},
	fonts : {
		src : "src/fonts/*",
		dest : "docs/src/fonts/"
	}
}

function clean(){
	return del(["dist/*" ,"!dist/src/images","!dist/src/fonts"])
}

function styles(){
	return gulp.src(paths.styles.src)
	.pipe(sourcemaps.init())
	.pipe(sass())
	.pipe(autoPrefixer({
		cascade : false
	}))
	.pipe(cleanCss(
		{level : 2}
	))
	.pipe(rename({
		basename: "main",
		suffix : ".min"
	}))
	.pipe(sourcemaps.write())
	.pipe(gulpSize(
		{showFiles:  true}
	))
	.pipe(gulp.dest(paths.styles.dest))
	.pipe(browserSync.stream())
}

function fonts(){
	return gulp.src(paths.fonts.src)
	.pipe(gulp.dest(paths.fonts.dest))
}

function  scripts(){
	return  gulp.src(paths.scripts.src)
	.pipe(babel({
		presets: ['@babel/env']
	}))
	.pipe(gulpSize(
		{showFiles:  true}
	))
	.pipe(uglify())
	.pipe(webpack({
		devtool: 'source-map'
	}))
	.pipe(gulp.dest(paths.scripts.dest))
	.pipe(browserSync.stream())
}

function watch(){
	browserSync.init({
        server: "docs/src/"
    })
	gulp.watch(paths.indexHtml.src , indexHtml)
	gulp.watch(paths.html.allSrc , html)
	gulp.watch(paths.html.dest).on("change" ,browserSync.reload)
	gulp.watch(paths.styles.src, styles)
	gulp.watch(paths.scripts.src, scripts)
	gulp.watch(paths.fonts.src , fonts)
	gulp.watch(paths.images.src , img)
}

function img(){
	return gulp.src(paths.images.src)
	.pipe(newer(paths.images.dest))
	.pipe(imagein())
	.pipe(gulp.dest(paths.images.dest))
}


function indexHtml(){
	return gulp.src(paths.indexHtml.src)
	.pipe(rigger())
	.pipe(htmlmin({	includeAutoGeneratedTags: true,
		removeAttributeQuotes: true,
		removeComments: true,
		removeRedundantAttributes: true,
		removeScriptTypeAttributes: true,
		removeStyleLinkTypeAttributes: true,
		sortClassName: true,
		useShortDoctype: true,
		collapseWhitespace: true}))
	.pipe(gulpSize(
		{showFiles:  true}
	))
	.pipe(gulp.dest(paths.indexHtml.dest))
	.pipe(browserSync.stream())
}

function html(){
	return gulp.src(paths.html.src)
	.pipe(rigger())
	.pipe(htmlmin({	includeAutoGeneratedTags: true,
		removeAttributeQuotes: true,
		removeComments: true,
		removeRedundantAttributes: true,
		removeScriptTypeAttributes: true,
		removeStyleLinkTypeAttributes: true,
		sortClassName: true,
		useShortDoctype: true,
		collapseWhitespace: true}))
	.pipe(gulpSize(
		{showFiles:  true}
	))
	.pipe(gulp.dest(paths.html.dest))
	.pipe(browserSync.stream())
}

const build =  gulp.series(clean,gulp.parallel(indexHtml,html,styles,scripts,img,fonts),watch)

export {clean}
export { styles}
export { watch}
export { build }
export {scripts }
export { img}
export {html }
export default build
